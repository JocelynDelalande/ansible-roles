#!/bin/sh

## Use Yunohost backup mechanism to build a backup and push it via borg to a
## remote repository, encrypted.
## Repository is auto-created if missing

set -e

TMP_PATH=/home/yunohost.backup/borg-tmp/
LOG_PATH=/var/log/borg-ynh-backup.log
REPOSITORY={{ borg_ynh_backup_repository }}
ARCHIVE=${REPOSITORY}::`date +%Y-%m-%d`
export BORG_RSH="ssh -i {{ borg_ynh_backup_ssh_key }}"
export BORG_PASSPHRASE="notsosecret"

# Trap on non-zero exit
trap '[ "$?" -eq 0 ] || cleanup' EXIT

cleanup_ynh_backup()
{
   # that's a hack, waiting for "yunohost backup delete" to allow arbitrary backups
   umount ${TMP_PATH}/data/*/* >/dev/null 2>&1 || /bin/true
   umount ${TMP_PATH}/data/* >/dev/null 2>&1 || /bin/true
   rm -rf ${TMP_PATH}
}

cleanup()
{
    echo "Something bad happened during backup, check ${LOG_PATH}"
    cleanup_ynh_backup
    exit $1
}

ts_log()
{
    echo `date '+%Y-%m-%d %H:%m:%S'` $1 >> ${LOG_PATH}
}

ts_log "Cleaning up."
cleanup_ynh_backup

ts_log "Performing yunohost backup."
yunohost backup create -r --ignore-apps -o ${TMP_PATH} \
    >> ${LOG_PATH} 2>&1

ts_log "Initializing repository, if needed."
borg list ${REPOSITORY} >/dev/null 2>&1 || \
  borg init --encryption=keyfile ${REPOSITORY} >> ${LOG_PATH} 2>&1

ts_log "Creating archive ${ARCHIVE}."
borg create -v --stats ${ARCHIVE} ${TMP_PATH} \
    >> ${LOG_PATH} 2>&1

ts_log "Rotating old backups."
borg prune -v $REPOSITORY \
    --keep-daily={{ borg_ynh_backup_daily }} \
    --keep-weekly={{ borg_ynh_backup_weekly }} \
    --keep-monthly={{ borg_ynh_backup_monthly }} \
    >> ${LOG_PATH} 2>&1

ts_log "Cleaning up."
cleanup_ynh_backup
exit 0
