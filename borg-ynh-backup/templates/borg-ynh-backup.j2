#!/bin/sh

## Use Yunohost backup mechanism to build a backup and push it via borg to a
## remote repository, encrypted.
## Repository is auto-created if missing

set -e

TMP_PATH=/home/yunohost.backup/borg-tmp/
LOG_PATH=/var/log/borg-ynh-backup.log
REPOSITORY={{ borg_ynh_backup_repository }}
BACKUP_DATE=`date +%Y-%m-%d`
ARCHIVE=${REPOSITORY}::$BACKUP_DATE
export BORG_RSH="ssh -i {{ borg_ynh_backup_ssh_key }}"
export BORG_PASSPHRASE="`cat {{ borg_ynh_backup_passphrase_path }}`"
export BORG_KEYS_DIR="{{ borg_ynh_backup_home }}/.borg/keys"
export BORG_CACHE_DIR="{{ borg_ynh_backup_home }}/.borg/cache"

YNH_BACKUP_CREATE={{ borg_ynh_backup_sudoed_create }}
BORG_BACKUP_PUSH={{ borg_ynh_backup_sudoed_push }}
YNH_BACKUP_CLEANUP={{ borg_ynh_backup_sudoed_cleanup }}
BORG={{ borg_ynh_backup_borg_path }}

# Trap on non-zero exit
trap '[ "$?" -eq 0 ] || cleanup' EXIT

cleanup()
{
    echo "Something bad happened during backup, check ${LOG_PATH}"
    sudo -n $YNH_BACKUP_CLEANUP
    exit $1
}

ts_log()
{
    echo `date '+%Y-%m-%d %H:%m:%S'` $1 >> ${LOG_PATH}
}

ts_log "Cleaning up."
sudo -n $YNH_BACKUP_CLEANUP

ts_log "Performing yunohost backup."
sudo -n $YNH_BACKUP_CREATE >> ${LOG_PATH} 2>&1

ts_log "Initializing repository, if needed."
$BORG list ${REPOSITORY} >/dev/null 2>&1 || \
  $BORG init --encryption=repokey ${REPOSITORY} >> ${LOG_PATH} 2>&1

ts_log "Creating archive ${ARCHIVE}."
sudo -n $BORG_BACKUP_PUSH $BACKUP_DATE >> ${LOG_PATH} 2>&1

ts_log "Rotating old backups."
$BORG prune -v $REPOSITORY \
    --keep-daily={{ borg_ynh_backup_daily }} \
    --keep-weekly={{ borg_ynh_backup_weekly }} \
    --keep-monthly={{ borg_ynh_backup_monthly }} \
    >> ${LOG_PATH} 2>&1

ts_log "Cleaning up."
sudo -n $YNH_BACKUP_CLEANUP
exit 0
