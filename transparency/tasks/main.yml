- name: install dependencies
  apt: name={{ item }} force=yes state=installed
  with_items:
    - python
    - python-virtualenv
    - python-all-dev
    - python-pip
    - git
    - supervisor
    - sudo

- name: create Transparency user
  user: name={{ transparency_user }} home={{ transparency_home_dir }}

- name: fetch application sources
  sudo: yes
  git:
    repo: '{{ transparency_git_repo_url }}'
    dest: '{{ transparency_install_dir }}'
    accept_hostkey: yes
    version: '{{ transparency_version }}'
  notify: restart transparency

- name: Attribute source to transparency user
  file:
    path: '{{ transparency_install_dir }}'
    state: directory
    owner: '{{ transparency_user }}'
    group: '{{ transparency_user }}'
    recurse: yes

- name: create virtualenv
  sudo: yes
  sudo_user: '{{ transparency_user }}'
  shell: virtualenv {{ transparency_venv_dir }} --python=/usr/bin/python3 creates={{ transparency_venv_dir }}

- name: install pip requirements
  sudo: yes
  sudo_user: '{{ transparency_user }}'
  pip:
    requirements: '{{ transparency_install_dir }}/requirements.txt'
    virtualenv: '{{ transparency_venv_dir }}'

- name: install gunicorn
  sudo: yes
  sudo_user: '{{ transparency_user }}'
  pip: name=gunicorn virtualenv={{ transparency_venv_dir }}

- name: set local_settings.py
  sudo_user: '{{ transparency_user }}'
  template:
    src: local_settings.j2
    dest: "{{ transparency_install_dir }}/transparency/local_settings.py"
    owner: '{{ transparency_user }}'
  notify: restart transparency

- name: migrate db
  sudo: yes
  sudo_user: '{{ transparency_user }}'
  shell: ./manage.py migrate --noinput
  args:
    chdir: '{{ transparency_install_dir }}'
  environment:
    PATH: '{{ transparency_venv_bin_path }}:{{ ansible_env.PATH }}'
    DJANGO_SETTINGS_FILE: '{{ transparency_install_dir }}/settings.py'

- name: create static dir
  file:
    path: '{{ transparency_static_dir }}'
    state: directory
    owner: '{{ transparency_user }}'
    group: '{{ transparency_user }}'
    recurse: yes

- name: collect static files
  sudo: yes
  sudo_user: '{{ transparency_user }}'
  shell: './manage.py collectstatic --noinput'
  args:
    chdir: '{{ transparency_install_dir }}'
  environment:
    PATH: "{{ transparency_venv_bin_path }}:{{ ansible_env.PATH }}"

- name: install supervisor
  apt: pkg=supervisor state=installed

- name: set supervisord config
  template: src=supervisor.j2 dest=/etc/supervisor/conf.d/transparency.conf mode=644
  notify: restart supervisor

- name: ensure application is running
  supervisorctl: name=transparency state=started
